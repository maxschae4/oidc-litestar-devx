services:
  demo-dev:
    container_name: demodev
    build:
      context: ..
      dockerfile: .devcontainer/backend/containerfile
    volumes:
      - ..:/demo
    command: sleep infinity
    networks:
      - demo
    depends_on: demodb

  demodb:
    container_name: demodb
    image: postgres:latest
    restart: unless-stopped
    volumes:
      # mount persistant volume for db data
      - demodb:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: demo
      POSTGRES_DB: demo
      POSTGRES_PASSWORD: demo
    ports:
      - 5432:5432
    networks:
      - demo

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.1.4
    restart: unless-stopped
    volumes:
      - ./config/keycloak/:/opt/keycloak/data/import
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: demo
      KC_HEALTH_ENABLED: "true"
      KC_HOSTNAME: "https://keycloak.localhost:4443"
      KC_PROXY_HEADERS: "forwarded"
    command: start-dev --import-realm
    ports:
      - 8080:8080
    networks:
      - demo
    extra_hosts:
      - "keycloak.localhost:host-gateway"
    healthcheck:
      # leverage some linux esoterica to call and parse the health api
      # https://stackoverflow.com/a/78229437
      test: [
        "CMD-SHELL",
        ' exec 3<>/dev/tcp/localhost/9000;
          echo -e "GET /health/ready HTTP/1.1\nhost: localhost:9000\n" >&3;
          timeout --preserve-status 1 cat <&3 | grep --max-count=1 status | grep --max-count=1 UP;
          ERROR=$?;
          exec 3<&-;
          exec 3>&-;
          exit $ERROR
        '
      ]
      interval: 5s
      timeout: 5s
      retries: 3

  oauth2-proxy:
    container_name: oauth2-proxy
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.8.1
    hostname: oauth2-proxy
    volumes:
      - "./config/oauth2-proxy.cfg:/oauth2-proxy.cfg"
      # mount the ssl certs from caddy as read-only
      - ./config/caddy/data:/ssl:ro
    restart: unless-stopped
    command: --config /oauth2-proxy.cfg
    ports:
      - 4180:4180
    networks:
      - demo
    # the "nonroot" user is inherited, but we need "root" (host uid/gid) for the bind mount
    user: root
    extra_hosts:
      - "keycloak.localhost:host-gateway"
    depends_on:
      keycloak:
        condition: service_healthy

  caddy:
    container_name: caddy
    image: caddy:2.9-alpine
    restart: unless-stopped
    ports:
      - "4480:80" # for http redirect
      - "4443:443"
      # - "4443:443/udp"
    volumes:
      - ./config/Caddyfile:/etc/caddy/Caddyfile
      - caddy_config:/config
      # we'll bind mount the data directory locally for easy access to development certs
      - ./config/caddy/data:/data:rw
    networks:
      - demo

networks:
  demo:
    name: demo

volumes:
  # persistent volume for postgres data
  demodb:
    name: demodb
  # persistent volume for caddy internal config
  caddy_config:
    name: caddy_config
